<?php

/**
 * @file
 * Theme file for players_theme.
 */

/**
 * Implements hook_preprocess_HOOK().
 *
 * Setting the faculty class colour and favicon information.
 */
function players_theme_preprocess_html(&$variables) {

  // Get the current user.
  $current_user = \Drupal::currentUser();

  // Get the roles of the user.
  $roles = $current_user->getRoles();

  // If there is only 1 role and that first role is authenticated, remove the manage link.
  // If there are multiple roles then we know that they will have the Manage link, we are
  // only removing the manage link for strictly authenticated users only.
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'user-' . $role;
  }

  if ($current_user->isAuthenticated()) {
    $variables['attributes']['class'][] = 'is-logged-in';
  }

  $config = \Drupal::config('players_cfg.site_settings');

  $operating_hours = $config->get('operating_hours');

  if ($operating_hours) {
    $variables['page']['operating_hours'] = [
      '#type' => 'processed_text',
      '#text' => $config->get('operating_hours')['value'],
      '#format' => $config->get('operating_hours')['format'],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function players_theme_preprocess_region(&$variables) {

  if ($variables['region'] == 'header') {
    $themeHandler = \Drupal::service('theme_handler');
    $variables['theme_path'] = $themeHandler->getTheme($themeHandler->getDefault())->getPath();

    $config = \Drupal::config('players_cfg.site_settings');

    $header_settings = $config->get('header_text');

    if ($header_settings) {
      $variables['header_text']['text'] = [
        '#type' => 'processed_text',
        '#text' => $config->get('header_text')['value'],
        '#format' => $config->get('header_text')['format'],
      ];

      $variables['header_text']['bg_color'] = $config->get('bg_color');
    }

    // Get the corrected date.
    $date = \Drupal::service('players_reserve.players_service')->getCorrectDate();

    $node = current(\Drupal::service('entity_type.manager')
      ->getStorage('node')
      ->loadByProperties(['title' => $date]));

    if (!$node) {
      return;
    }

    $games = $node->field_game_types->getValue()[0]['target_id'] ?? NULL;

    $paragraph = \Drupal::service('entity_type.manager')
      ->getStorage('paragraph')
      ->load($games);

    $game_type = $paragraph->field_game_type->getValue()[0]['value'];

    // Get the start time.
    $start_time = $paragraph->field_start_time->getValue()[0]['value'];
    $start_time_am_pm = $paragraph->field_start_time_am_pm->getValue()[0]['value'];
    $start_time = date('G', strtotime($start_time . $start_time_am_pm)) - 1;

    // Get the end time.
    $end_time = $paragraph->field_end_time->getValue()[0]['value'];
    $end_time_am_pm = $paragraph->field_end_time_am_pm->getValue()[0]['value'];
    $end_time = date('G', strtotime($end_time . $end_time_am_pm));

    // Get the current time.
    $current_time = date('G');

    // Flag to show the seated players.
    $show_seated = FALSE;

    // If the current time is between 0 and the end time,
    // set the show seated flag.
    if ($current_time >= 0 && $current_time <= $end_time) {
      $show_seated = TRUE;
    }

    // If the start time is less than the current time,
    // set the show seated flag.
    if ($start_time <= $current_time) {
      $show_seated = TRUE;
    }

    $variables['reserves'] = \Drupal::service('players_reserve.players_service')
      ->getCurrentReserveStats(
        $node,
        $game_type,
        $show_seated
      );
  }

}
